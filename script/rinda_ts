#!/usr/bin/env ruby

require File.expand_path('../../lib/drb/runner',  __FILE__)
require File.expand_path('../../lib/rinda/worker', __FILE__)
require 'rinda/tuplespace'
require 'rinda/ring'

# FIXME
require 'rubygems'
require 'daemons'

options = {
  :uri         => 'druby://:0',
  :detach      => false,
  :log_file    => 'rinda_ts.log',
  :pid_file    => 'rinda_ts.pid'
}

class TSRunner < DRb::Runner
  include Daemonize

  def self.command
    File.basename(__FILE__)
  end

  def create_ts
    @ts = Rinda::TupleSpace.new
    if @options[:without_ring_server]
      DRb.start_service(@options[:uri], @ts)
      logger.info "Starting Rinda::TupleSpace without Rinda::RingServer"
    else
      DRb.start_service(@options[:uri])
      place = Rinda::RingServer.new(@ts)
      logger.info "Starting Rinda::TupleSpace with Rinda::RingServer"
    end
    logger.info DRb.uri
  end

  def add_options(opts)
    opts.separator "rinta_ts options:"
    opts.on("-r", "--without-ring-server", "Make this server run as a stand alone dRuby server (without RingServer).") { @options[:without_ring_server] = true }

    opts.separator ""
  end

  def cmd_start
    if @options[:detach]
      raise RuntimeError, "Rinda::TupleSpace Server is already running (pid file #{pid_file} exists)." if File.exist?(pid_file)
      daemonize(log_file)
      #Process.daemon (supported only by Ruby 1.9)
      File.open(pid_file, 'w'){ |f| f.write(Process.pid) }
      at_exit do
        renewer = Rinda::SimpleRenewer.new
        while (tuples = Rinda::Worker.read_all(@ts, /[^(Rinda::LoggerWorker)]/)).size > 0 do
          # send exit_worker to the worker class in the first tuple
          Rinda::Worker.exit_request(@ts, tuples[0][1], renewer)
          #FIXME
          sleep 1
        end
        Rinda::Worker.exit_request(@ts, "Rinda::LoggerWorker")
        #FIXME
        sleep 1
        File.delete(pid_file) if File.exist?(pid_file)
      end
      create_ts
      DRb.thread.join
    else
      at_exit do
        renewer = Rinda::SimpleRenewer.new
        while (tuples = Rinda::Worker.read_all(@ts, /[^(Rinda::LoggerWorker)]/)).size > 0 do
          # send exit_request to the worker class in the first tuple
          Rinda::Worker.exit_request(@ts, tuples[0][1], renewer)
          #FIXME
          sleep 1
        end
        Rinda::Worker.exit_request(@ts, "Rinda::LoggerWorker")
        #FIXME
        sleep 1
      end
      create_ts
      $stdin.gets
    end
  end
end

runner = TSRunner.new(ARGV, options)
runner.run!
