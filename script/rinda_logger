#!/usr/bin/env ruby

require File.expand_path('../../lib/drb/runner',  __FILE__)
require File.expand_path('../../lib/rinda/worker_runner',  __FILE__)
require File.expand_path('../../lib/rinda/worker',  __FILE__)

options = {
  :uri         => 'druby://:0',
  :detach      => false,
  :environment  => File.expand_path('../../config/rinda_environment',  __FILE__),
  :worker      => 'logger'
}

class LoggerRunner < Rinda::WorkerRunner
  def self.command
    File.basename(__FILE__)
  end

  def init_env
    require @options[:environment]
  end

  def create_workers(ts)
      synchronize do
        if @options[:ts_uri].nil?
          provider = Rinda::RingProvider.new(worker_class_name.to_sym, DRbObject.new(logger), Rinda::Worker.key(DRb.uri, object_id))
          provider.provide
        else
          ts.write([:name, worker_class_name.to_sym, DRbObject.new(logger), Rinda::Worker.key(DRb.uri, object_id)])
        end
      end
  end
end

runner = LoggerRunner.new(ARGV, options)
runner.run!
